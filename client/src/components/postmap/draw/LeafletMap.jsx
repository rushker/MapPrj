// components/postmap/draw/LeafletMap.jsx
import { MapContainer, TileLayer } from 'react-leaflet';
import { useRef } from 'react';
import useGeomanEvents from './useGeomanEvents';
import AreaLayer from './layers/AreaLayer';
import EntityLayer from './layers/EntityLayer';
import { useAreaContext } from '../../../context/AreaContext';
import { isValidAreaId } from '../../../utils/areaUtils';

/**
 * LeafletMap l√† component trung t√¢m qu·∫£n l√Ω b·∫£n ƒë·ªì t∆∞∆°ng t√°c.
 * 
 * ---
 * üìå Ch·ª©c nƒÉng li√™n quan ƒë·∫øn handleCreateArea:
 * 
 * Khi ng∆∞·ªùi d√πng v·∫Ω xong h√¨nh ch·ªØ nh·∫≠t (rectangle) ƒë·ªÉ t·∫°o khu v·ª±c m·ªõi (Khu A),
 * callback `onCreateArea()` ƒë∆∞·ª£c g·ªçi v·ªõi d·ªØ li·ªáu GeoJSON c·ªßa polygon ƒë√≥.
 *
 * ‚ùóT·∫°i th·ªùi ƒëi·ªÉm n√†y ch∆∞a t·ªìn t·∫°i `areaId`, v√¨ v·∫≠y LeafletMap KH√îNG ƒë∆∞·ª£c g·∫Øn `areaId` v√†o callback.
 * Tr√°ch nhi·ªám t·∫°o `areaId` (g·ªçi API createArea, hi·ªÉn th·ªã toast, l∆∞u context) n·∫±m ·ªü component cha `PostMapWrapper`.
 * 
 * ‚úÖ LeafletMap ch·ªâ ƒë√≥ng vai tr√≤ "ph√°t hi·ªán ng∆∞·ªùi d√πng ƒë√£ v·∫Ω xong" v√† truy·ªÅn raw polygon l√™n callback cha.
 */

export default function LeafletMap({
  areaMetadata = null,
  selectedEntityId = null,
  onSelectEntity = () => {},

  // Geoman control flags
  enableDraw = false,
  drawShape = null,
  enableEdit = false,
  enableDrag = false,
  enableRemove = false,

  // Callbacks
  onCreateArea = () => {},
  onCreateEntity = () => {},
  onUpdatePolygon = () => {},
  onUpdateEntityGeometry = () => {},
}) {
  const mapRef = useRef(null);
  const { areaId, isEditMode } = useAreaContext();

  // ‚úÖ Callback khi v·∫Ω xong khu v·ª±c m·ªõi (rectangle - Khu A)
  const handleCreateArea = (polygon) => {
    const coordinates = polygon.coordinates;

    // ‚ùå KH√îNG truy·ªÅn areaId v√¨ ƒë√¢y l√† giai ƒëo·∫°n kh·ªüi t·∫°o (ch∆∞a g·ªçi API)
    // ‚úÖ ƒê·∫©y d·ªØ li·ªáu polygon th√¥ v·ªÅ component cha ƒë·ªÉ x·ª≠ l√Ω createArea
    onCreateArea({ coordinates, polygon, maxZoom: 18 });
  };

  // ‚úÖ Callback khi v·∫Ω xong entity con (polygon/marker - Khu C)
  const handleCreateEntity = (entity) => {
    if (!isValidAreaId(areaId)) return null;

    // ‚úÖ V·ªõi entity th√¨ c·∫ßn g·∫Øn areaId ƒë·ªÉ backend bi·∫øt entity thu·ªôc khu n√†o
    onCreateEntity({ ...entity, areaId });
  };

  useGeomanEvents({
    mapRef,
    enableDraw,
    drawShape,
    enableEdit,
    enableDrag,
    enableRemove,
    onCreateKhuA: handleCreateArea,
    onCreateEntity: handleCreateEntity,
    onUpdatePolygon,
    onUpdateEntityGeometry,
    isEditMode,
  });

  return (
    <MapContainer
      center={[10.762622, 106.660172]}
      zoom={16}
      style={{ height: '100%', width: '100%' }}
      whenCreated={(mapInstance) => {
        mapRef.current = mapInstance;
      }}
    >
      <TileLayer
        attribution='&copy; <a href="https://osm.org">OpenStreetMap</a>'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
      />

      {/* Hi·ªÉn th·ªã polygon khu v·ª±c ch√≠nh (Khu A) */}
      {areaMetadata && <AreaLayer area={areaMetadata} />}

      {/* Hi·ªÉn th·ªã c√°c entity con (marker, polygon nh·ªè) l·∫•y t·ª´ context */}
      <EntityLayer
        selectedEntityId={selectedEntityId}
        onSelectEntity={onSelectEntity}
      />
    </MapContainer>
  );
}
